/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    id 'java'
    id 'java-library'
    id 'maven-publish'
    id "io.freefair.lombok" version "4.1.6"
//    id 'com.bmuschko.docker-remote-api' version '6.1.2'
    id "com.palantir.docker" version "0.24.0"
}

repositories {
    mavenLocal()
    maven {
        url = 'https://repo.maven.apache.org/maven2'
    }
}

dependencies {
    api 'org.seleniumhq.selenium:selenium-server:3.141.59'

    implementation 'org.aspectj:aspectjrt:1.8.13'
    implementation 'com.spotify:docker-client:8.15.0'
    implementation 'io.fabric8:openshift-client:4.1.0'
    implementation 'ch.qos.logback:logback-core:1.2.3'
    implementation 'ch.qos.logback:logback-classic:1.2.3'
    implementation 'ch.qos.logback:logback-access:1.2.3'
    implementation 'org.slf4j:jul-to-slf4j:1.7.25'
    implementation 'org.slf4j:slf4j-simple:1.7.25'
    implementation 'net.logstash.logback:logstash-logback-encoder:5.2'
    implementation 'io.prometheus:simpleclient:0.5.0'
    implementation 'io.prometheus:simpleclient_hotspot:0.5.0'
    implementation 'io.prometheus:simpleclient_servlet:0.5.0'
    implementation 'io.prometheus:simpleclient_jetty:0.5.0'
    implementation 'de.vandermeer:asciitable:0.3.2'
    implementation 'com.google.code.gson:gson:2.8.5'
    implementation 'org.apache.httpcomponents:httpmime:4.5.6'
    implementation 'org.apache.commons:commons-collections4:4.3'
    testImplementation 'io.fabric8:openshift-server-mock:4.1.0'
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-core:2.23.0'
    testImplementation 'com.github.stefanbirkner:system-rules:1.19.0'
    testImplementation 'org.testng:testng:6.14.3'
    testImplementation 'org.awaitility:awaitility:3.1.2'

    compileOnly 'org.eclipse.jetty:jetty-server:9.4.12.v20180830'
    compileOnly 'org.projectlombok:lombok:1.18.10'
    compileOnly group: 'org.jetbrains', name: 'annotations', version: '16.0.1'
    annotationProcessor 'org.projectlombok:lombok:1.18.10'
}

group = 'de.zalando.ep'
version = '3.141.59x-SNAPSHOT'
def dockerVersion = "67w"
description = 'Zalenium'
sourceCompatibility = '1.8'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

task fatJar(type: Jar) {
    manifest {
        attributes(
                'Main-Class': 'org.openqa.grid.selenium.GridLauncherV3'
        )
    }

    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    } {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
    with jar

    configure {
        dependsOn(test)
    }
}

test {
    useTestNG()
}

def copyDestination = "${project.buildDir}${File.separator}dockerContext"

task targetCopy(type: Copy) {
    from("scripts", "docker", "dashboard", sourceSets.main.resources)
    into(copyDestination)

    doLast {
        file(copyDestination).eachFile { file ->
            if (file.isFile()) {
                def fileText = file.text
                if (fileText.contains("\$")) {
                    fileText = fileText.replaceAll(('\\$\\{project.build.finalName}'), "${project.name}-${project.version}")
                    fileText = fileText.replaceAll(('\\$\\{project.version}'), "${project.version}")
                    file.write(fileText)
                }
            }

        }
    }
}

def getGitHash() {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

def baseName = (project.ext.properties.get("BASE_NAME") ?: "michaelboulton2/zalenium")
def vertag = (project.ext.properties.get("IMAGE_TAG") ?: dockerVersion)
def hashtag = getGitHash()

docker {
    dependsOn(targetCopy, fatJar)
    name "$baseName"
    tag("withver", "$name:$vertag")
    tag("withhash", "$name:$hashtag")

    files(targetCopy.outputs.files, fatJar.outputs)
}

publishing {
    publications {
        dockerPublication(MavenPublication) {
            from components.docker
            artifactId project.name + "-docker"
        }
    }
}
